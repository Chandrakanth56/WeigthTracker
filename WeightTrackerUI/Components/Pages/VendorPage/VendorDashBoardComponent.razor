@page "/VendorDashboard"
@rendermode InteractiveServer
@using WeightTrackerUI.HelperInterfaces
@using WeightTrackerUI.Services
@inject ProtectedLocalStorage localStorage
@inject UserServices users
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProtectedSessionStorage sessionStorage
@inject ITokenService TokenService

<div class="min-vh-100 d-flex flex-column bg-light">

    <nav class="navbar navbar-expand-lg navbar-light bg-white shadow-sm sticky-top border-bottom">
        <div class="container-fluid px-4">
            <a class="navbar-brand d-flex align-items-center">
                <i class="fas fa-tractor text-primary me-2 fs-3"></i>
                <span class="fw-bold text-primary fs-4">@VName</span>
            </a>
            <div class="ms-auto d-flex align-items-center gap-3">
                <button class="btn btn-outline-secondary btn-sm px-3" @onclick="Logout">
                    <i class="fas fa-sign-out-alt me-1"></i> Logout
                </button>
                <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center shadow-sm"
                     style="width:45px;height:45px;font-weight:600;font-size:18px;">
                    @FirstLatter
                </div>
            </div>
        </div>
    </nav>

    <header class="bg-primary text-white py-4 shadow-sm">
        <div class="container">
            <h3 class="fw-bold mb-1">Welcome, @VName</h3>
            <p class="mb-0 opacity-75">You have <strong>@(farmers?.Count ?? 0)</strong> farmers connected</p>
        </div>
    </header>

    <main class="container my-5">

        <div class="card shadow-sm border-0 rounded-4 mb-4">
            <div class="card-body d-flex flex-wrap gap-3 align-items-center">
                <input type="text" class="form-control w-auto flex-grow-1"
                       placeholder="Search farmer by name or ID"
                       @bind="Search" @bind:event="oninput" />
                <button class="btn btn-primary px-4" @onclick="OnSearchClicked">
                    <i class="fas fa-search me-1"></i> Search
                </button>
                <button class="btn btn-success ms-auto px-4" @onclick="AddFarmer">
                    <i class="fas fa-user-plus me-1"></i> Add Farmer
                </button>
            </div>
        </div>
        @if (Farmers != null && Farmers.Any())
        {
            <div class="table-responsive">
                <table class="table table-bordered table-hover mt-3">
                    <thead class="table-light">
                        <tr>
                            <th>Farmer ID</th>
                            <th>Farmer Name</th>
                            <th>Vendor ID</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var f in Farmers)
                        {
                            <tr>
                                <td>@f.FarmerId</td>
                                <td>@f.FarmerName</td>
                                <td>@f.VendorId</td>
                                 <td class="text-end">
                                        <button class="btn btn-outline-primary btn-sm me-2"
                                                @onclick="() => ViewDetails(f.FarmerId)">
                                            <i class="fas fa-id-card me-1"></i> Details
                                        </button>
                                        <button class="btn btn-outline-success btn-sm"
                                                @onclick="() => ViewWeightDetails(f.FarmerId)">
                                            <i class="fas fa-weight-hanging me-1"></i> Weights
                                        </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-muted mt-3">No farmers found. Try changing your search criteria.</p>
        }

        <div class="card shadow-sm border-0 rounded-4 mb-5">
            <div class="card-header bg-white border-bottom fw-bold">
                <i class="fas fa-users me-2"></i> Farmers
            </div>
            <div class="table-responsive">
                @if (farmers == null)
                {
                    <div class="text-center text-muted py-5">
                        <div class="spinner-border text-primary mb-3"></div>
                        <p>Loading farmers...</p>
                    </div>
                }
                else if (!farmers.Any())
                {
                    <div class="alert alert-warning text-center rounded-0 m-0">
                        No farmers found
                    </div>
                }
                else
                {
                    <table class="table align-middle mb-0">
                        <thead class="table-light">
                            <tr>
                                <th><i class="fas fa-user me-1"></i> Farmer</th>
                                <th>ID</th>
                                <th>Total Weights</th>
                                <th>Last Entry</th>
                                <th class="text-end">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var farmer in farmers)
                            {
                                var stat = TotalWeights.FirstOrDefault(f => f.FarmerId == farmer.FarmerId);

                                <tr class="row-hover">
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center me-2"
                                                 style="width:40px;height:40px;font-weight:600;">
                                                @farmer.FarmerName.Substring(0, 1).ToUpper()
                                            </div>
                                            @farmer.FarmerName
                                        </div>
                                    </td>
                                    <td>@farmer.FarmerId</td>
                                    <td>@(stat?.TotalWeight ?? 0)</td>
                                    <td>@(stat?.LastEntry?.ToString("yyyy-MM-dd HH:mm") ?? "-")</td>
                                    <td class="text-end">
                                        <button class="btn btn-outline-primary btn-sm me-2"
                                                @onclick="() => ViewDetails(farmer.FarmerId)">
                                            <i class="fas fa-id-card me-1"></i> Details
                                        </button>
                                        <button class="btn btn-outline-success btn-sm"
                                                @onclick="() => ViewWeightDetails(farmer.FarmerId)">
                                            <i class="fas fa-weight-hanging me-1"></i> Weights
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>

        <div class="card shadow-sm border-0 rounded-4">
            <div class="card-header bg-white border-bottom fw-bold">
                <i class="fas fa-balance-scale me-2"></i> Recent Weights
            </div>
            @if (RecentWeights == null)
            {
                <div class="text-center text-muted py-5">
                    <div class="spinner-border text-success mb-3"></div>
                    <p>Loading recent weights...</p>
                </div>
            }
            else if (!RecentWeights.Any())
            {
                <div class="alert alert-info text-center rounded-0 m-0">
                    No weight entries yet
                </div>
            }
            else
            {
                <ul class="list-group list-group-flush">
                    @foreach (var entry in RecentWeights)
                    {
                        <li class="list-group-item d-flex justify-content-between">
                            <span>@entry.farmerName — @entry.weights kg</span>
                            <small class="text-muted">@entry.timestamp?.ToString("yyyy-MM-dd")</small>
                        </li>
                    }
                </ul>
            }
        </div>
    </main>
</div>


<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    .table td, .table th {
        vertical-align: middle;
    }

    .row-hover:hover {
        background: #f8f9fa;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .btn {
        transition: all 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
        }

    .list-group-item {
        transition: background 0.2s ease;
    }

        .list-group-item:hover {
            background: #f8f9fa;
        }
</style>

@code {
    private int VId;
    private string VName = string.Empty;
    private string FirstLatter = string.Empty;
    private string ExeptionMessage = string.Empty;

    private string Search = "";

    private List<FarmerDTO> TotalWeights;
    private List<FarmerResult> Farmers;
    private List<Farmer>? farmers;
    private List<Weight>? RecentWeights;

    private string SearchTerm = string.Empty;
    private DateTime? StartDate;
    private DateTime? EndDate;

    private IEnumerable<Farmer> FilteredFarmers =>
        string.IsNullOrWhiteSpace(SearchTerm) ? farmers ?? Enumerable.Empty<Farmer>() :
        farmers?.Where(f => f.FarmerName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                            f.FarmerId.ToString().Contains(SearchTerm)) ?? Enumerable.Empty<Farmer>();

    protected override async Task OnInitializedAsync()
    {
        VName = users.VendorName;
        VId = users.VendorId;
        FirstLatter = string.IsNullOrEmpty(VName) ? "" : VName.Substring(0, 1).ToUpper();

        farmers = await GetFarmersAsync();
        TotalWeights = await GetToTalWeightOfEachFarmer();
        RecentWeights = await GetRecentWeights();
    }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        if (e.Location.Contains("/VendorDashboard"))
        {
            farmers = await GetFarmersAsync();
            RecentWeights = await GetRecentWeights();
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && users.VendorId == 0)
        {
            var storedId = await sessionStorage.GetAsync<int>("VendorId");
            var storedName = await sessionStorage.GetAsync<string>("VendorName");

            if (storedId.Success && storedName.Success)
            {
                users.VendorId = storedId.Value;
                users.VendorName = storedName.Value;
            }
        }
    }

    private async Task<List<Farmer>> GetFarmersAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Farmer>>(
                $"https://localhost:7123/api/Vendors/GetAllFarmer?VendorId={users.VendorId}");
            return response ?? new List<Farmer>();
        }
        catch (Exception ex)
        {
            ExeptionMessage = $"Error: {ex.Message}";
            return new List<Farmer>();
        }
    }

    private async Task<List<Weight>> GetRecentWeights()
    {
        try
        {
            RecentWeights = await Http.GetFromJsonAsync<List<Weight>>($"https://localhost:7123/api/Vendors/recent?vendorId={users.VendorId}");
            return RecentWeights ?? new();
        }
        catch (Exception ex)
        {
            ExeptionMessage = $"Error: {ex.Message}";
            return new();
        }

    }
    private async Task<List<FarmerDTO>> GetToTalWeightOfEachFarmer()
    {
        try
        {
            TotalWeights = await Http.GetFromJsonAsync<List<FarmerDTO>>($"https://localhost:7123/api/Vendors/FarmerStats?vendorId={users.VendorId}");
            return TotalWeights ?? new();
        }
        catch (Exception ex)
        {
            ExeptionMessage = $"Error: {ex.Message}";
            return new();
        }
    }

    private async Task OnSearchClicked()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Search))
                return;

            string? name = null;
            int? id = null;

            if (int.TryParse(Search, out int parsedId))
            {
                id = parsedId;
            }
            else
            {
                name = Search;
            }
            var queryParams = new List<string>();
            if (!string.IsNullOrEmpty(name))
                queryParams.Add($"name={name}");
            if (id.HasValue)
                queryParams.Add($"id={id.Value}");
            if (users.VendorId > 0)
                queryParams.Add($"vendorId={users.VendorId}");

            var queryString = string.Join("&", queryParams);
            var url = $"https://localhost:7123/api/Vendors/SearchWithLatestWeight?{queryString}";


            Farmers = await Http.GetFromJsonAsync<List<FarmerResult>>(url) ?? new List<FarmerResult>();
        }
        catch (HttpRequestException ex)
        {

            Console.WriteLine($"Error fetching farmers: {ex.Message}");
        }
    }
    private void AddFarmer()
    {
        Navigation.NavigateTo("/add-farmer");
    }

    private void ViewWeightDetails(int farmerId)
    {
        users.FarmerId = farmerId;
        var token1 = TokenService.GenerateToken(farmerId);
        var token2 = TokenService.GenerateToken(users.VendorId);
        Navigation.NavigateTo($"/VendorDashboard/WeightDetails/{token1}/{token2}");
    }

    private void ViewDetails(int farmerId)
    {
        users.FarmerId = farmerId;
        var token = TokenService.GenerateToken(farmerId);
        Navigation.NavigateTo($"/VendorDashboard/FarmerDetails/{token}");
    }

    private void Logout()
    {
        Navigation.NavigateTo("/login", true);
    }


    public class FarmerDTO
    {
        public int FarmerId { get; set; }
        public double TotalWeight { get; set; }
        public DateTime? LastEntry { get; set; }
    }

    public class FarmerResult
    {
        public int FarmerId { get; set; }
        public string FarmerName { get; set; } = string.Empty;
        public int VendorId { get; set; }
    }
}
