@inject HttpClient Http

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f0f2f5;
        padding: 2rem;
    }

    .records-card {
        border: none;
        border-radius: 0.75rem;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.07);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .records-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.1);
        }

    .card-header {
        background: linear-gradient(135deg, #0d6efd, #0dcaf0);
        color: white;
        border-top-left-radius: 0.75rem;
        border-top-right-radius: 0.75rem;
        border-bottom: none;
    }

    .table {
        margin-bottom: 0;
    }

        .table > :not(caption) > * > * {
            padding: 0.9rem 1rem;
        }

    .table-hover > tbody > tr:hover > * {
        background-color: #f8f9fa;
    }
</style>

@if (isLoading)
{
    <div class="text-center mt-4">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-2">Loading weights...</p>
    </div>
}
else if (farmerWeights == null || !farmerWeights.Any())
{
    <p class="text-center text-muted mt-4">No weights recorded for this farmer yet.</p>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card records-card">
                    <div class="card-header d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-bar-chart-line-fill me-2 fs-5"></i>
                            <h4 class="mb-0 fw-semibold">Weight Records</h4>
                        </div>
                        @if (!string.IsNullOrEmpty(FarmerName))
                        {
                            <span class="fw-medium text-white">@FarmerName</span>
                        }
                    </div>

                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Weight (kg)</th>
                                        <th>Timestamp</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var w in farmerWeights)
                                    {
                                        <tr>
                                            <td>@w.weights</td>
                                            <td>@w.timestamp?.ToString("dd-MMM-yyyy hh:mm tt")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@code {
    [Parameter] public int FarmerId { get; set; }
    [Parameter] public int VendorId { get; set; }
    [Parameter] public string FarmerName { get; set; }

    private List<Weight> farmerWeights;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWeights();
    }

    private async Task LoadWeights()
    {
        try
        {
            farmerWeights = await Http.GetFromJsonAsync<List<Weight>>($"https://localhost:7123/api/Vendors/GetFarmerWeights?FarmerID={FarmerId}&VendorId={VendorId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading farmer weights: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}


