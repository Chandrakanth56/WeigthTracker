@page "/FarmerDashboard/{token}"
@using System.Net.Http.Json
@inject HttpClient Http
@inject UserServices users
@inject ProtectedSessionStorage sessionStorage
@inject ITokenService TokenServices

<style>
    .dashboard-container {
        padding: 2rem;
    }

    .card {
        border-radius: 0.75rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

    .avatar {
        width: 100px;
        height: 100px;
        background-color: #0d6efd;
        color: white;
        font-size: 40px;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        margin: auto;
    }

    .btn-custom {
        border-radius: 0.5rem;
        padding: 0.6rem 1.2rem;
    }
</style>

<div class="dashboard-container">
    @if (IsLoading)
    {
        <div class="text-center mt-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">Loading farmer details...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(ExceptionMessage))
    {
        <div class="alert alert-warning text-center">@ExceptionMessage</div>
    }
    else if (farmer != null && show)
    {
        <div class="row">
            <!-- Left Side: Farmer Details -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-lg border-0 text-center">
                    <div class="card-body">
                        <div class="avatar">@FirstLetter</div>
                        <h3 class="fw-bold mt-3">@farmer.FarmerName</h3>
                        <p class="text-muted mb-2">ID: @farmer.FarmerId</p>
                        <p class="text-muted mb-0"><i class="bi bi-envelope me-2"></i>@farmer.FarmerEmail</p>

                        <div class="d-flex justify-content-center gap-2 mt-3">
                            <button class="btn btn-primary btn-sm">
                                <i class="bi bi-chat-dots me-2"></i> Message
                            </button>
                            <button class="btn btn-outline-secondary btn-sm">
                                <i class="bi bi-pencil me-2"></i> Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Side: Total Weight -->
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm border-0">
                    <div class="card-body text-center">
                        <h4 class="fw-bold">Total Weight</h4>
                        <p class="display-5 fw-bold text-success">@TotalWeight Kg</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string token { get; set; }
    private int FarmerId;
    private Farmer? farmer;
    private double TotalWeight;
    private bool IsLoading = false;
    private string ExceptionMessage = string.Empty;
    private bool hasLoaded;
    private bool show;

    private string FirstLetter => string.IsNullOrEmpty(farmer?.FarmerName) ? "?" : farmer.FarmerName[0].ToString();

    protected override async Task OnInitializedAsync()
    {
        FarmerId = Convert.ToInt32(TokenServices.GetId(token));
        await LoadDetails();
        await Task.Delay(2000);
        if (farmer != null)
        {
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task LoadDetails()
    {
        IsLoading = true;
        ExceptionMessage = string.Empty;


        try
        {
            if (FarmerId > 0)
            {
                farmer = await Http.GetFromJsonAsync<Farmer>($"https://localhost:7123/api/Farmer/GetTheirDetails?farmerID={FarmerId}");
                TotalWeight = await Http.GetFromJsonAsync<double>($"https://localhost:7123/api/Farmer/GetTotalWeight?farmerId={FarmerId}");
                if (farmer != null)
                {
                    show = true;
                }
            }
            else
            {
                ExceptionMessage = "No farmer ID found in session.";
            }
        }
        catch (Exception ex)
        {
            ExceptionMessage = "Failed to load farmer details. " + ex.Message;
        }

        IsLoading = false;
    }
}
