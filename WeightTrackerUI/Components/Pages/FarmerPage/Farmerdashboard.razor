@page "/FarmerDashboard/{token}"
@using System.Net.Http.Json
@inject HttpClient Http
@inject UserServices users
@inject ProtectedSessionStorage sessionStorage
@inject NavigationManager Navigation
@inject ITokenService TokenServices
@if (IsLoading)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border text-primary" role="status"></div>
        <span class="ms-2">Loading farmer details...</span>
    </div>
}
else if (!string.IsNullOrEmpty(ExceptionMessage))
{
    <div class="alert alert-danger">@ExceptionMessage</div>
}
else if (farmer != null)
{
    <div class="container-fluid py-4">
        <div class="card bg-gradient text-white shadow-lg mb-4" style="background: linear-gradient(90deg,#4facfe,#00f2fe);">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div class="text-primary">
                    <h2 class="fw-bold mb-0">@farmer.FarmerName</h2>
                    <p class="mb-0">ID: @farmer.FarmerId | Vendor: @farmer.VendorId</p>
                    <p class="mb-0">@farmer.FarmerEmail</p>
                </div>
                <div class="d-flex align-items-center gap-3">
                    <NavLink class="btn btn-light p-3 fw-bold shadow-sm btn-outline-secondary"
                             href="@URL">
                        Add Weight
                    </NavLink>

                    <div class="rounded-circle bg-white text-primary fw-bold d-flex justify-content-center align-items-center shadow"
                         style="width:80px; height:80px; font-size:32px;">
                        @FirstLetter
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card shadow text-center p-3">
                    <h6 class="text-muted">🌾 Total Weight</h6>
                    <h3 class="fw-bold">@TotalWeight KG</h3>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card shadow text-center p-3">
                    <h6 class="text-muted">📦 Records</h6>
                    <h3 class="fw-bold">@RecordCount</h3>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card shadow text-center p-3">
                    <h6 class="text-muted">⏱ Last Record</h6>
                    <h5 class="fw-bold">@farmerWeights?.OrderByDescending(f => f.timestamp).FirstOrDefault()?.timestamp?.ToString("dd MMM yyyy")</h5>
                </div>
            </div>
        </div>
        <div class="card shadow-lg mb-4 d-flex">
            <div class="card-header bg-primary text-white fw-bold d-flex justify-content-between align-items-center">
                <span>Weight Records</span>
                <a class="btn btn-light btn-sm" href="@URL2">View More</a>
            </div>

            <div class="card-body p-0">
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center p-4">
                        <div class="spinner-border text-primary"></div>
                        <span class="ms-2">Loading weight records...</span>
                    </div>
                }
                else if (farmerWeights == null || !farmerWeights.Any())
                {
                    <div class="text-center text-muted p-4">No weight records found.</div>
                }
                else
                {
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Weight Id</th>
                                <th>📅 Date</th>
                                <th>⚖️ Weight</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var record in farmerWeights)
                            {
                                <tr>
                                    <td>@record.weightId</td>
                                    <td>@record.timestamp?.ToString("dd MMM yyyy hh:mm tt")</td>
                                    <td>@record.weights</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string token { get; set; }
    private int FarmerId;
    private int RecordCount;
    private Farmer? farmer;
    private List<Weight> farmerWeights;
    private double TotalWeight;
    private bool IsLoading = false;
    private string ExceptionMessage = string.Empty;
    private string URL;
    private string URL2;
    private bool hasLoaded;
    private bool isLoading;
    private bool show;

    private string FirstLetter => string.IsNullOrEmpty(farmer?.FarmerName) ? "?" : farmer.FarmerName[0].ToString();

    protected override async Task OnInitializedAsync()
    {
        FarmerId = Convert.ToInt32(TokenServices.GetId(token));
        await LoadDetails();
        URL = $"/AddWeight/{TokenServices.GenerateToken(FarmerId)}";
        URL2 = $"/WeightDetails/{TokenServices.GenerateToken(FarmerId)}";
        await Task.Delay(2000);
        if (farmer != null)
        {
            await InvokeAsync(StateHasChanged);
        }
    }
    private async Task LoadDetails()
    {
        IsLoading = true;
        ExceptionMessage = string.Empty;


        try
        {
            if (FarmerId > 0)
            {
                farmer = await Http.GetFromJsonAsync<Farmer>($"https://localhost:7123/api/Farmer/GetTheirDetails?farmerID={FarmerId}") ?? new();
                TotalWeight = await Http.GetFromJsonAsync<double>($"https://localhost:7123/api/Farmer/GetTotalWeight?farmerId={FarmerId}");
                RecordCount = await Http.GetFromJsonAsync<int>($"https://localhost:7123/api/Farmer/RecordCount?farmerId={FarmerId}");
                farmerWeights = await Http.GetFromJsonAsync<List<Weight>>($"https://localhost:7123/api/Farmer?FarmerID={FarmerId}") ?? new();
                if (farmer != null)
                {
                    isLoading = false;
                    show = true;
                }
            }
            else
            {
                ExceptionMessage = "No farmer ID found in session.";
            }
        }
        catch (Exception ex)
        {
            ExceptionMessage = "Failed to load farmer details. " + ex.Message;
        }

        IsLoading = false;
    }
}
